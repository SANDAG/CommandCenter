<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>
<link href="<c:url value="/css/treeview.css" />" rel="stylesheet">

<div id='modalDirPicker' class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Choose a directory</h4>
      </div>
      <div class="modal-body">
        <div class="css-treeview">
          <ul>
          </ul>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" id="dirPickerSubmitButton">Choose</button>
      </div>
    </div>
  </div>
</div>

<script>
	var dirPicker = {
		rootId: 'i0',
		pickedIds: [],
		separator: null,
		createLi: function(parentDir, dir, id) {
    		var li = $([ '<li data-path="', parentDir, dir, dirPicker.separator, '">',
    						'<input type="checkbox" id="', id, '"/>',
    						'<label for="', id, '">', dir, '</label></li>' ].join(''));
    		li.click(function(event) {
    			var li = $(this);
    			event.stopPropagation();
    			if ($.inArray(id, dirPicker.pickedIds) >= 0) {
    				return;
    			}
    			dirPicker.pickedIds.push(id);
    			console.log('handling click', id, event.target);
    			if (id != dirPicker.rootId) {
    				$('.selected').removeClass('selected');
    				li.children('label').addClass('selected');	
    			}			
    			if (li.find('ul').length == 0) {
    				dirPicker.populateSubDirs(li);
    			}
    		});
    		
    		return li;
    	},
    	populateSubDirs: function(li) {
    		var errorFunction = function() {
    			alert("There was a problem reading the file system; please refresh to try again.");
    		};
    		var successFunction = function(dirs) {
    			var ul = $('<ul>');
    			var i;
    			var parentId = li.children("input").attr("id");
    			var parentPath = li.data("path");
    			if (dirs.length == 0) {
    				li.children('input').addClass('empty');
    			} else {
    				for (i = 0; i < dirs.length; i++) {
    					ul.append(dirPicker.createLi(parentPath, dirs[i], parentId
    							+ '_' + i));
    				}
    				li.append(ul);
    			}
    		};
    		
    		$.ajax({
    			url : '<c:url value="/directories" />?parentDir='
    					+ encodeURIComponent(li.data('path')),
    			dataType : 'json',
    			beforeSend: function () {$("body").addClass("busy");},
    			success : successFunction,
    			error : errorFunction,
    			complete: function () {$("body").removeClass("busy");}
    		});
    	},
    	onChosenCallback: function(path) {
    		alert('default onChosenCallback impl called with "' + path + "'");
    	},
    	init: function() {
    		var rootDir = '${fn:replace(dirPickerRoot, '\\', '\\\\')}';
			// backslash if starts with drive letter or UNC path, else forward slash
			this.separator = /^([A-Z]:|\\\\)/i.test(rootDir) ? '\\' : '/';
    		$('.css-treeview ul').append(dirPicker.createLi('', rootDir, dirPicker.rootId));
    		$('#dirPickerSubmitButton').click(function() {
    			dirPicker.onChosenCallback($('.css-treeview .selected').parent().data('path'));
    			$('#modalDirPicker').modal('hide');
    		});    		
    	}
    };
	
	$(function() {		
		dirPicker.init();
	});
	
</script>
